[
        {
            "id": 9,
            "title": "Zombie Runner",
            "tech" : "Unity-3d, C#",
            "play": "",
            "description": "A prototype for a 3D endless runner game with a modular and scalable code architecture.Simply import 3D models for characters, buildings, and obstacles to match your theme—everything else is ready to go!",
            "features": "➢ Created a scalable, maintainable, and loosely coupled architecture to ensure flexibility for future feature additions and improvements.<br>➢ Used Service Locator to develop a centralized Game Manager that efficiently manages and decouples services for better code modularity.<br>➢ Implemented a generic object pool for building and obstacles to optimize performance and reduce memory overhead during gameplay.<br>➢ Used the Observer Pattern to facilitate real-time updates and event handling between different game systems, allowing for responsive game state changes without direct dependencies.",
            "video": "https://www.youtube.com/embed/9S3vArwSOUg?si=JkN7pnoD8xhkCCN3",
            "github": "https://github.com/nayankamalverma/Endless"
        },{
            "id": 8,
            "title": "Tiny-Verse",
            "tech" : "Unity-3d, C#",
            "play": "https://nayankamalverma.itch.io/tiny-verse",
            "description": "Tiny Verse is a 3D puzzle game set in a kids’ play area. Players must navigate through obstacles and enemies to find a key hidden in a maze, completing the level.",
            "features": "➢  Made this for WTF x IGDC game jam 2024 and the theme was “Small World, Big Adventure”.<br>➢ Optimized code architecture for scalability and maintainability.<br>➢ Implemented a service Locator pattern with Dependency Injection to manage and decouple game services efficiently.<br>➢ Used the observer Pattern to enable seamless interaction between services, eliminating the need for direct references and enhancing modularity.<br>➢ Utilized the MVC architecture to design a scalable and modular player controller, ensuring a clean separation of concerns.<br>➢ Designed enemy AI using a State Machine for behaviour control and Nav-Mesh for pathfinding and navigation.",
            "video": "https://www.youtube.com/embed/4hG_YqAFFlY?si=1V_c9lZENCMa8m_p",
            "github": "https://github.com/nayankamalverma/Tinyverse/tree/main"
        },
        {
            "id": 5,
            "title": "Endless-Waves",
            "tech" : "Unity-2d, C#",
            "play": "https://nayankamalverma.itch.io/endless-waves",
            "description": "Enter a world overrun by the undead Zombie, a fast-paced 2D top-down shooter where survival is the only goal. Armed with an arsenal of weapons, you must battle relentless waves of zombies.",
            "features": "➢ Made this for a game jam hosted by GameDev.tv and the theme was “Last stand”.<br>➢ Implemented enemy AI, aim and shoot system, high score save system, audio system and setup difficultycurve as per time passes.<br>➢ Also added animations, blood particle system with interactive UI",
            "video": "https://www.youtube.com/embed/Wz3O8B6LPkk?si=rbhDvi5GzLpxKI5_",
            "github": "https://github.com/nayankamalverma/Endless-Waves"
        },
        {
            "id": 7,
            "title": "Chest-system",
            "tech" : "Unity-2D, C#",
            "play": "https://nayankamalverma.itch.io/chest-system",
            "description": "A modular chest system designed with different architectural patterns! In this project, I leveraged various design patterns to create a clean, scalable, and maintainable codebase.",
            "features": "➢Service Locator: For efficiently managing dependencies.<br>➢ MVC(Model-View-Controller): To ensure separation of concerns and a clean code structure.<br>➢ State Machine: To handle chest states like locked, unlocked, opening, and opened seamlessly.<br>➢ Observer Pattern: For event-driven communication, ensuring loose coupling between components.",
            "video": "https://www.youtube.com/embed/nPzKZqjjQXM?si=VGims-Q0AxbUb8WB",
            "github": "https://github.com/nayankamalverma/Chest-System"
        },
        {
            "id": 7,
            "title": "Assassins-Shadow",
            "tech" : "Unity-2D, C#",
            "play": "https://outscal.com/nayankamalverma/game/play-assassins-shadow-game",
            "description": "Assassins-Shadow is an action-packed stealth game, featuring dynamic enemy AI and immersive stealth mechanics. With advanced State Machines and modular architecture, it offers engaging and strategic gameplay.",
            "features": "➢Dynamic Enemy AI: Enemies switch between states like Idle, Patrolling, Chasing, and Shooting, with unique behaviors for each enemy type, including One Punch Man, Clone Man, and Hitman.<br>➢ Stealth-Based Gameplay: Navigate levels strategically to avoid detection, eliminate enemies, and complete objectives.<br>➢ Advanced Architecture: Implements MVC, Service Locator, State Machines, and Scriptable Objects for a scalable and maintainable design.<br>➢ Customizable Levels: Easily configure levels, AI behaviors, and enemy types for endless gameplay possibilities.",
            "video": "https://www.youtube.com/embed/cs7CtCCsfTg?si=8mjs8m9r-VDkXFtV",
            "github": "https://github.com/nayankamalverma/Assassins-Shadow"
        },
        {
            "id": 7,
            "title": "Command Tactics",
            "tech" : "Unity-2D, C#",
            "play": "https://outscal.com/nayankamalverma/game/play-command-tactics-6-game",
            "description": "Command Tactics is a turn-based battle game inspired by retro RPGs, utilizing the Command Pattern to manage gameplay actions, undo, and replay mechanics. It emphasizes strategic combat and extensible design.",
            "features": "➢ Turn-Based Combat: Players execute actions like Attack, Heal, and Buff in a strategic, turn-based format.<br>➢ Command Pattern Integration: Encapsulates actions as objects, enabling robust Replay and Undo functionality for enhanced gameplay flexibility.<br> ➢ Extensible Unit Management: Customize units with unique stats and abilities using Scriptable Objects for scalable content.<br> ➢ Modular Architecture: Combines MVC, Service Locator, and Replay systems for a maintainable and scalable design framework.<br>",
            "video": "https://www.youtube.com/embed/SGvrz42vrOY?si=0UTx5BO6FxWqOSOO",
            "github": "https://github.com/nayankamalverma/Command_Tactics"
        },
        {
            "id": 7,
            "title": "Angry Monkeys",
            "tech" : "Unity-2D, C#",
            "play": "https://outscal.com/nayankamalverma/game/play-angry-monkeys-3-game",
            "description": "➢Angry Monkeys is a tower defense game, where players strategically place monkey towers to stop waves of challenging balloons.",
            "features": "➢ Strategically deploy monkeys like Sharp Eye, Ninja, and Sniper, each with unique abilities, using projectiles like Darts, Shuriken, and Bullets for tailored gameplay.<br>➢ Face Red, Blue, and Metal balloons, each with unique speed, damage, and rewards, across nine increasingly difficult waves.<br>➢ Implements Singleton, Service Locator, and Dependency Injection to create a decoupled and modular system for managing services.",
            "video": "https://www.youtube.com/embed/A4e11uTAZGY?si=zjK3RQLIvhvu-Q7B",
            "github": "https://github.com/nayankamalverma/Angry-Monkeys"
        },
        {
            "id": 6,
            "title": "Snake-2D",
            "tech" : "C++ and SFML",
            "play": "",
            "description": "Relive the nostalgia of classic mobile gaming with the Retro Snake Game, inspired by the iconic version found on old Nokia phones. Guide your pixelated snake across the screen, consuming food to grow longer while avoiding collisions with walls and yourself.",
            "features": "➢Made from scratch in c++ and sfml. <br>➢ 4 unique levels with one boss level and added different boosters.<br>➢ Implemented the Service locator design pattern to manage game services, enhancing modularity and scalablity.<br>➢ Used MVC pattern for creating snake and levels.",
            "video": "https://www.youtube.com/embed/C0y3PQm6ilo",
            "github": "https://github.com/nayankamalverma/Snake"
        },
        {
            "id": 4,
            "title": "Minesweeper",
            "tech" : "C++ and SFML",
            "play": "",
            "description": "A classic remake of the timeless Minesweeper game! Uncover tiles, use number clues to locate hidden mines, and clear the board without triggering an explosion. Simple, addictive, and perfect for a quick brain challenge!",
            "features": "➢ Developed a Minesweeper game with traditional mechanics and scalable design.<br>➢ Implemented the Service Locator design pattern for efficient resource management.<br>➢ Applied MVC architecture to separate game logic, UI, and data handling.",
            "video": "https://www.youtube.com/embed/tgYr3GgCFcM",
            "github": "https://github.com/nayankamalverma/Minesweeper"
        },
        {
            "id": 3,
            "title": "Skip-The Lights",
            "tech" : "Unity-2d, C#",
            "play": "https://outscal.com/nayankamalverma/game/play-skip-the-lights-1-game",
            "description": "2D endless runner game developed in Unity. made on theme \"Avoid The Light\"",
            "features": "➢ Implemented a dynamic background parallax system to enhance visual depth and user experience.<br>➢ Utilized singleton pattern, oops, coroutine, JSON utilities to build save system for high score.<br>➢ Created dynamic UI elements and engaging game mechanics to improve gameplay.",
            "video": "https://www.youtube.com/embed/74bQSqWbbkY",
            "github": "https://github.com/nayankamalverma/Skip---The-Lights"
        },
        {
            "id": 2,
            "title": "The Explorer",
            "tech" : "Unity-2d, C#",
            "play": "https://outscal.com/nayankamalverma/game/play-the-explorer-game",
            "description": "➢ A 2D RPG game.<br>",
            "features": "➢ Implemented gameplay mechanics, enemy AIs, character animations, audio system.<br>➢ also designed and created UI elements and 3 unique levels using tilemap tool.<br>➢ Used singleton, OOP for implementation.",
            "image": "images/project/explorer.png",
            "github": "https://github.com/nayankamalverma/2D-Platformer-Game"
        },
        {
            "id": 1,
            "title": "Duck Hunt",
            "tech" : "C++ and SFML",
            "play": "",
            "description": "➢ Clone of classic Duck hunt game",
            "features": "➢ Utilized MVC, service locator pattern for smooth gameplay.<br>➢ Animated duck sprites with different flying patterns.<br>➢  Mouse-controlled aiming and shooting Score tracking.<br>➢  Sound effects for shooting and duck hits and Game over screen when the player misses too many ducks",
            "image": "images/project/duck_hunt.jpg",
            "github": "https://github.com/nayankamalverma/Duck-Hunt"
        },
        {
            "id": 0,
            "title": "Space Invaders",
            "tech" : "C++ and SFML",
            "play": "",
            "description": " A clone of the classic Space Invaders game, where players must shoot down waves of alien invaders before they reach the bottom of the screen. ",
            "features": "➢ Implemented core mechanics like player controls, enemy movement and collision detection.<br>➢ Utilized MVC, service locator pattern, OOP principles, event handling, and optimized performance for smooth gameplay.<br>➢ Integrated graphics, animations, and sound effects to enhance the user experience.",
            "video": "https://www.youtube.com/embed/kgfeGIyMsJc",
            "github": "https://github.com/nayankamalverma/Space-Invaders"
        }
    ]
    